// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}



model Project {
  id            String     @default(uuid()) @id
  name          String
  epics         Epic[]
  estimation    Estimation?
  batches       Batch[]
  estimatedAt   DateTime?
  signedAt      DateTime?
  startAt       DateTime?
  endAt         DateTime?
  unit          UnitType
  productivity  Int @default(1)
  ressources    Ressource[]
  versions      Version[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "projects")
}

model People {
  id            String @default(uuid()) @id
  name          String
  ressourceId   String 
  ressource     Ressource @relation(fields: [ressourceId], references: [id])
  @@map(name: "people")

}

model Ressource {
  id            String @default(uuid()) @id
  developers    People[]
  date          DateTime
  availability  Float
  projectId     String
  project       Project @relation(fields: [projectId], references: [id])
  @@map(name: "ressources")
}

model Version {
  id            String @default(uuid()) @id
  name          String
  startDate     DateTime
  scope         String
  volume        Int
  releases      Release[]
  projectId     String
  project       Project @relation(fields: [projectId], references: [id])
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "versions")
}

model Release {
  id              String @default(uuid()) @id
  name            String
  forecastEndDate DateTime
  volume          Int
  comment         String
  versionId       String
  version         Version @relation(fields: [versionId], references: [id])
  productions     Production[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "releases")

}

model Production {
  id            String @default(uuid()) @id
  done          Int
  date          DateTime
  releaseId     String
  release       Release @relation(fields: [releaseId], references: [id])
  @@map(name: "productions")

}

model Estimation {
  id            String       @default(uuid()) @id
  archi         String
  sales         String
  projectId     String
  project       Project @relation(fields: [projectId], references: [id])
  epics         EstimationEpic[]
  minSpeed      Float
  maxSpeed      Float
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "estimations")
}

model EstimationFeature {
  id                String       @default(uuid()) @id
  name              String
  batch             Int
  dependencies      String
  details           String
  gestures          Gesture[]
  exclude           String
  saasOrPackage     String
  type              FeatureType
  estimationEpic    EstimationEpic @relation(fields: [estimationEpicId], references: [id])
  estimationEpicId  String
  feature           Feature?
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "estimation_features")
}

model Gesture {
  id                  String       @default(uuid()) @id
  name                String
  details             String
  type                GestureType
  estimationFeature   EstimationFeature[]
  feature             Feature[]
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "gestures")
}

model Epic {
  id                String       @default(uuid()) @id
  name              String  @unique
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  project           Project @relation(fields: [projectId], references: [id])
  projectId         String
  features          Feature[]
  estimationEpic    EstimationEpic? @relation(fields: [estimationEpicId], references: [id])
  estimationEpicId  String
  @@map(name: "epics")
}

model EstimationEpic {
  id            String       @default(uuid()) @id
  name          String
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  estimationId  String
  estimation    Estimation @relation(fields: [estimationId], references: [id])
  epic          Epic?
  features      EstimationFeature[]
  @@map(name: "estimation_epics")
}

model Feature {
  id                  String       @default(uuid()) @id
  name                String  @unique
  currentStep         FeatureStep
  epic                Epic @relation(fields: [epicId], references: [id])
  epicId              String
  tickets             Ticket[]
  estimationFeature   EstimationFeature @relation(fields: [estimationFeatureId], references: [id])
  estimationFeatureId String
  gestures            Gesture[]
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "features")
}

model Ticket {
  id              String       @default(uuid()) @id
  name            String
  feature         Feature? @relation(fields: [featureId], references: [id])
  featureId       String?
  dependencies    Ticket[] @relation("Dependency")
  dependencyFor   Ticket? @relation("Dependency", fields: [dependencyForId], references: [id])
  dependencyForId String?
  points          Int
  currentStep     TicketStep
  batchId         String?
  batch           Batch? @relation(fields: [batchId], references: [id])
  doneAt          DateTime?
  @@map(name: "tickets")
}

model Batch {
  id        String       @default(uuid()) @id
  name      String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  tickets   Ticket[]
  capacity  Int // in points
  length    Int // in days
  team      Team @relation(fields: [teamId], references: [id])
  teamId    String
  @@map(name: "batches")
}

model Team {
  id          String       @default(uuid()) @id
  developers  Developer[]
  batch       Batch[]
  @@map(name: "teams")
}

model Developer {
  id        String       @default(uuid()) @id
  teamId    String
  team      Team @relation(fields: [teamId], references: [id])
  capacity  Int // in points
  @@map(name: "developers")
}

model Changelog {
  id          String @default(uuid()) @id
  author      String @default("")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  type        ChangelogType
  targetId    String
  to          String
  toString    String
  @@map(name: "changelog")
}

enum FeatureStep {
  DESIGN
  CONCEPTION
  DEVELOPMENT
  DONE
}

enum TicketStep {
  BACKLOG
  DOING
  PEER_REVIEW
  TEST
  DONE
}

enum FeatureType {
  A
  B
  C
}

enum GestureType {
  FRONT
  BACK
}

enum ChangelogType {
  UPDATE_TICKET_STEP
}

enum UnitType {
  TICKET
  POINT
}