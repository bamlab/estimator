// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  id           String       @id @default(uuid())
  name         String
  epics        Epic[]
  estimation   Estimation?
  batches      Batch[]
  productions  Production[]
  estimatedAt  DateTime?
  signedAt     DateTime?
  startAt      DateTime?
  endAt        DateTime?
  unit         UnitType
  productivity Float        @default(1.0)
  team         Team?
  versions     Version[]
  createdAt    DateTime     @default(now()) @map(name: "created_at")
  updatedAt    DateTime     @updatedAt @map(name: "updated_at")

  @@map(name: "projects")
}

model Staffing {
  id          String    @id @default(uuid())
  date        DateTime
  value       Float
  developer   Developer @relation(fields: [developerId], references: [id])
  developerId String
}

model Version {
  id        String    @id @default(uuid())
  name      String
  startDate DateTime
  scope     String
  volume    Int
  releases  Release[]
  projectId String
  project   Project   @relation(fields: [projectId], references: [id])
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "versions")
}

model Release {
  id              String   @id @default(uuid())
  name            String
  forecastEndDate DateTime
  volume          Int
  comment         String
  versionId       String
  version         Version  @relation(fields: [versionId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "releases")
}

model Production {
  id        String   @id @default(uuid())
  done      Int
  date      DateTime
  Project   Project  @relation(fields: [projectId], references: [id])
  projectId String

  @@map(name: "productions")
}

model Estimation {
  id        String           @id @default(uuid())
  archi     String
  sales     String
  projectId String           @unique
  project   Project          @relation(fields: [projectId], references: [id])
  epics     EstimationEpic[]
  minSpeed  Float
  maxSpeed  Float
  createdAt DateTime         @default(now()) @map(name: "created_at")
  updatedAt DateTime         @updatedAt @map(name: "updated_at")

  @@map(name: "estimations")
}

model EstimationFeature {
  id               String         @id @default(uuid())
  name             String
  batch            Int
  dependencies     String
  details          String
  gestures         Gesture[]
  exclude          String
  saasOrPackage    String
  type             FeatureType
  estimationEpic   EstimationEpic @relation(fields: [estimationEpicId], references: [id])
  estimationEpicId String
  feature          Feature?
  createdAt        DateTime       @default(now()) @map(name: "created_at")
  updatedAt        DateTime       @updatedAt @map(name: "updated_at")

  @@map(name: "estimation_features")
}

model Gesture {
  id                String              @id @default(uuid())
  name              String
  details           String
  type              GestureType
  estimationFeature EstimationFeature[]
  feature           Feature[]
  createdAt         DateTime            @default(now()) @map(name: "created_at")
  updatedAt         DateTime            @updatedAt @map(name: "updated_at")

  @@map(name: "gestures")
}

model Epic {
  id               String          @id @default(uuid())
  name             String          @unique
  createdAt        DateTime        @default(now()) @map(name: "created_at")
  updatedAt        DateTime        @updatedAt @map(name: "updated_at")
  project          Project         @relation(fields: [projectId], references: [id])
  projectId        String
  features         Feature[]
  estimationEpic   EstimationEpic? @relation(fields: [estimationEpicId], references: [id])
  estimationEpicId String          @unique

  @@map(name: "epics")
}

model EstimationEpic {
  id           String              @id @default(uuid())
  name         String
  createdAt    DateTime            @default(now()) @map(name: "created_at")
  updatedAt    DateTime            @updatedAt @map(name: "updated_at")
  estimationId String
  estimation   Estimation          @relation(fields: [estimationId], references: [id])
  epic         Epic?
  features     EstimationFeature[]

  @@map(name: "estimation_epics")
}

model Feature {
  id                  String            @id @default(uuid())
  name                String            @unique
  currentStep         FeatureStep
  epic                Epic              @relation(fields: [epicId], references: [id])
  epicId              String
  tickets             Ticket[]
  estimationFeature   EstimationFeature @relation(fields: [estimationFeatureId], references: [id])
  estimationFeatureId String            @unique
  gestures            Gesture[]
  createdAt           DateTime          @default(now()) @map(name: "created_at")
  updatedAt           DateTime          @updatedAt @map(name: "updated_at")

  @@map(name: "features")
}

model Ticket {
  id              String     @id @default(uuid())
  name            String
  feature         Feature?   @relation(fields: [featureId], references: [id])
  featureId       String?
  dependencies    Ticket[]   @relation("Dependency")
  dependencyFor   Ticket?    @relation("Dependency", fields: [dependencyForId], references: [id])
  dependencyForId String?
  points          Int
  currentStep     TicketStep
  batchId         String?
  batch           Batch?     @relation(fields: [batchId], references: [id])
  doneAt          DateTime?

  @@map(name: "tickets")
}

model Batch {
  id        String   @id @default(uuid())
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  tickets   Ticket[]
  capacity  Int // in points
  length    Int // in days
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String

  @@map(name: "batches")
}

model Team {
  id         String      @id @default(uuid())
  developers Developer[]
  projectId  String      @unique
  project    Project?    @relation(fields: [projectId], references: [id])
  batch      Batch[]

  @@map(name: "teams")
}

model Developer {
  id                   String     @id @default(uuid())
  name                 String
  teamId               String
  team                 Team       @relation(fields: [teamId], references: [id])
  staffing             Staffing[]
  defaultStaffingValue Float
  capacity             Int // in points

  @@map(name: "developers")
}

model Changelog {
  id        String        @id @default(uuid())
  author    String        @default("")
  createdAt DateTime      @default(now()) @map(name: "created_at")
  type      ChangelogType
  targetId  String
  to        String
  toString  String

  @@map(name: "changelog")
}

enum FeatureStep {
  DESIGN
  CONCEPTION
  DEVELOPMENT
  DONE
}

enum TicketStep {
  BACKLOG
  DOING
  PEER_REVIEW
  TEST
  DONE
}

enum FeatureType {
  A
  B
  C
}

enum GestureType {
  FRONT
  BACK
}

enum ChangelogType {
  UPDATE_TICKET_STEP
}

enum UnitType {
  TICKET
  POINT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PreviewSubscription {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}
